---

---

<script>
  // Declare types for window functions
  declare global {
    interface Window {
      handleLike: (imageId: string) => Promise<void>;
      showImageDetails: (imageId: string) => Promise<void>;
    }
  }

  const imageGallery = document.getElementById(
    "imageGallery"
  ) as HTMLDivElement;
  const modal = document.getElementById("imageModal") as HTMLDivElement;
  const modalImage = document.getElementById("modalImage") as HTMLImageElement;
  const modalPrompt = document.getElementById(
    "modalPrompt"
  ) as HTMLParagraphElement;
  const commentsList = document.getElementById(
    "commentsList"
  ) as HTMLDivElement;
  const commentForm = document.getElementById("commentForm") as HTMLFormElement;
  const closeModal = document.getElementById("closeModal") as HTMLButtonElement;

  if (
    !imageGallery ||
    !modal ||
    !modalImage ||
    !modalPrompt ||
    !commentsList ||
    !commentForm ||
    !closeModal
  ) {
    console.error("Required elements not found");
    throw new Error("Required elements not found");
  }

  let currentImageId = null;

  async function handleLike(imageId) {
    try {
      await fetch("/api/images", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ imageId, action: "like" }),
      });
      await loadImages();
    } catch (error) {
      console.error("Error liking image:", error);
    }
  }

  async function handleComment(e) {
    e.preventDefault();
    if (!currentImageId) return;

    const form = e.target;
    const formData = new FormData(form);
    const text = formData.get("comment");

    try {
      await fetch("/api/comments", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ imageId: currentImageId, text }),
      });

      form.reset();
      await loadImages();
      await showImageDetails(currentImageId);
    } catch (error) {
      console.error("Error adding comment:", error);
    }
  }

  async function fetchComments(imageId) {
    try {
      const response = await fetch(`/api/comments?imageId=${imageId}`);
      return await response.json();
    } catch (error) {
      console.error("Error fetching comments:", error);
      return [];
    }
  }

  async function showImageDetails(imageId) {
    const [imagesResponse, comments] = await Promise.all([
      fetch("/api/images"),
      fetchComments(imageId)
    ]);
    
    const images = await imagesResponse.json();
    const image = images.find((img) => img.id === imageId);

    if (image) {
      currentImageId = imageId;
      modalImage.src = image.url;
      modalPrompt.textContent = image.prompt;

      commentsList.innerHTML = comments
        .map(
          (comment) => `
          <div class="border-b border-gray-200 py-3">
            <div class="flex items-center mb-1">
              <div class="h-6 w-6 rounded-full bg-gray-200"></div>
              <span class="ml-2 font-medium">User</span>
              <span class="ml-2 text-xs text-gray-500">
                ${new Date(comment.createdAt).toLocaleDateString()}
              </span>
            </div>
            <p class="text-gray-700 ml-8">${comment.text}</p>
          </div>
        `
        )
        .join("");

      modal.classList.remove("hidden");
    }
  }

  async function loadImages() {
    try {
      const response = await fetch("/api/images");
      const images = await response.json();

      imageGallery.innerHTML = images
        .map(
          (image) => `
          <div class="bg-white rounded-lg shadow-md overflow-hidden">
            <div class="p-4 border-b">
              <div class="flex items-center">
                <div class="h-8 w-8 rounded-full bg-gray-200"></div>
                <span class="ml-3 font-medium">User</span>
              </div>
            </div>
            
            <div class="relative aspect-square">
              <img 
                src="${image.url}" 
                alt="${image.prompt}" 
                class="w-full h-full object-cover cursor-pointer"
                onclick="showImageDetails('${image.id}')"
              />
            </div>
            
            <div class="p-4">
              <div class="flex items-center gap-4 mb-4">
                <button
                  onclick="handleLike('${image.id}')"
                  class="flex items-center gap-1 text-gray-700 hover:text-red-500"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
                  </svg>
                  <span>${image.likes}</span>
                </button>
                <button 
                  onclick="showImageDetails('${image.id}')"
                  class="flex items-center gap-1 text-gray-700 hover:text-blue-500"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
                  </svg>
                  <span>Comments</span>
                </button>
              </div>
              
              <p class="text-sm text-gray-600 mb-2">
                <span class="font-medium">Prompt:</span> ${image.prompt}
              </p>
              
              <p class="text-xs text-gray-500 mt-2">
                ${new Date(image.createdAt).toLocaleDateString()}
              </p>
            </div>
          </div>
        `
        )
        .join("");
    } catch (error) {
      console.error("Error loading images:", error);
    }
  }

  // Load images on page load
  loadImages();

  // Refresh gallery when new image is generated
  window.addEventListener("refreshGallery", () => loadImages());

  // Close modal when clicking outside
  modal.addEventListener("click", (e) => {
    if (e.target === modal) {
      modal.classList.add("hidden");
      currentImageId = null;
    }
  });

  // Close modal when clicking close button
  closeModal.addEventListener("click", () => {
    modal.classList.add("hidden");
    currentImageId = null;
  });

  // Handle comment form submission
  commentForm.addEventListener("submit", handleComment);

  // Make functions available globally
  window.handleLike = handleLike;
  window.showImageDetails = showImageDetails;
</script>

<div class="bg-white p-6 rounded-lg shadow-md">
  <h2 class="text-xl font-semibold mb-4">Your Generated Images</h2>
  <div id="imageGallery" class="grid grid-cols-1 max-w-xl mx-auto gap-8">
    <!-- Images will be loaded here dynamically -->
  </div>
</div>

<!-- Image Modal -->
<div
  id="imageModal"
  class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center p-4"
>
  <div
    class="bg-white rounded-lg max-w-3xl w-full max-h-[90vh] overflow-y-auto"
  >
    <div class="p-4 border-b flex justify-between items-center">
      <h3 class="text-xl font-semibold">Image Details</h3>
      <button id="closeModal" class="text-gray-500 hover:text-gray-700">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-6 w-6"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>

    <div class="p-4">
      <img id="modalImage" class="w-full rounded-lg" alt="Selected image" />
      <p id="modalPrompt" class="mt-4 text-gray-700"></p>
    </div>

    <div class="p-4 border-t">
      <h4 class="font-medium mb-4">Comments</h4>
      <div id="commentsList" class="space-y-4">
        <!-- Comments will be loaded here dynamically -->
      </div>

      <form id="commentForm" class="mt-6">
        <div class="flex gap-2">
          <input
            type="text"
            name="comment"
            placeholder="Add a comment..."
            class="flex-1 rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
            required
          />
          <button
            type="submit"
            class="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
          >
            Post
          </button>
        </div>
      </form>
    </div>
  </div>
</div>
